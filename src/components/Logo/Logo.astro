---
import LottieLogo from './LottieLogo.jsx';
import TextLogo from './TextLogo.jsx';
import { Image } from 'astro:assets';
import POSTER_SRC from '../../assets/GWS-animated.png';

export interface Props {
  loading?: 'lazy' | 'eager';
  trigger?: 'auto' | 'scroll' | 'visible' | 'load';
  textFadeMs?: number;
  animateOutText?: boolean;
  class?: string;
  useLottie?: boolean;
}

const {
  loading = 'eager',
  trigger = 'auto',
  textFadeMs = 1200,
  animateOutText = false,
  class: className = '',
  useLottie = true,
} = Astro.props;

const shouldUseLottie = useLottie && (
  loading === 'eager' ||
  trigger === 'scroll' ||
  trigger === 'load'
);

// Match Tailwind: base 40px, lg 45px â†’ provide 1x/2x sources
const LOGO_WIDTHS = [40, 45, 80, 90]; // 1x + 2x for both sizes
const LOGO_SIZES = '(min-width: 1024px) 45px, 40px';
---

<a href="/" class={`flex justify-center items-center gap-1.5 ${className}`}>
  {shouldUseLottie ? (
    <LottieLogo
      alt="Griffin's Web Services Animated Logo"
      loading="lazy"
      trigger={trigger}
      className="logo-class"
      mediaClasses="block w-[40px] lg:w-[45px] h-auto"
      width={45}
      height={45}
      client:visible
    >
      {/* ðŸ§  High-DPI poster via responsive widths + sizes */}
      <Image
        src={POSTER_SRC}
        alt="Griffin's Web Services Logo"
        loading={loading}
        decoding="async"
        format="webp"
        widths={LOGO_WIDTHS}
        sizes={LOGO_SIZES}
        quality={90}
        class="block w-[40px] lg:w-[45px] h-auto"
        fetchpriority={loading === 'eager' ? 'high' : undefined}
      />
    </LottieLogo>
  ) : (
    <Image
      src={POSTER_SRC}
      alt="Griffin's Web Services Logo"
      loading={loading}
      decoding="async"
      format="webp"
      widths={LOGO_WIDTHS}
      sizes={LOGO_SIZES}
      quality={90}
      class="block w-[40px] lg:w-[45px] h-auto"
      fetchpriority={loading === 'eager' ? 'high' : undefined}
    />
  )}

  <div>
    <TextLogo
      title="Griffin's Web Services"
      className="flex flex-col p-0 m-0"
      fadeDuration={textFadeMs}
      animateOutText={animateOutText}
      loading={loading}
      client:load={loading === 'eager'}
      client:visible={loading !== 'eager'}
    />
  </div>
</a>
